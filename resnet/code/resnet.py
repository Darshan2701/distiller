op_version_set = 0
def forward(self,
    input_1: Tensor) -> Tensor:
  input_2 = torch._convolution(input_1, self.conv1.weight, None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1, False, False, True)
  _0 = torch.add_(self.bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_3 = torch.batch_norm(input_2, self.bn1.weight, self.bn1.bias, self.bn1.running_mean, self.bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_4 = torch.threshold_(input_3, 0., 0.)
  input_5, _1 = torch.max_pool2d_with_indices(input_4, [3, 3], [2, 2], [1, 1], [1, 1], False)
  input_6 = torch._convolution(input_5, getattr(self.layer1, "0").conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _2 = torch.add_(getattr(self.layer1, "0").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_7 = torch.batch_norm(input_6, getattr(self.layer1, "0").bn1.weight, getattr(self.layer1, "0").bn1.bias, getattr(self.layer1, "0").bn1.running_mean, getattr(self.layer1, "0").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_8 = torch.threshold_(input_7, 0., 0.)
  input_9 = torch._convolution(input_8, getattr(self.layer1, "0").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _3 = torch.add_(getattr(self.layer1, "0").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_1 = torch.batch_norm(input_9, getattr(self.layer1, "0").bn2.weight, getattr(self.layer1, "0").bn2.bias, getattr(self.layer1, "0").bn2.running_mean, getattr(self.layer1, "0").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_10 = torch.add_(out_1, input_5, alpha=1)
  input_11 = torch.threshold_(input_10, 0., 0.)
  input_12 = torch._convolution(input_11, getattr(self.layer1, "1").conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _4 = torch.add_(getattr(self.layer1, "1").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_13 = torch.batch_norm(input_12, getattr(self.layer1, "1").bn1.weight, getattr(self.layer1, "1").bn1.bias, getattr(self.layer1, "1").bn1.running_mean, getattr(self.layer1, "1").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_14 = torch.threshold_(input_13, 0., 0.)
  input_15 = torch._convolution(input_14, getattr(self.layer1, "1").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _5 = torch.add_(getattr(self.layer1, "1").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_2 = torch.batch_norm(input_15, getattr(self.layer1, "1").bn2.weight, getattr(self.layer1, "1").bn2.bias, getattr(self.layer1, "1").bn2.running_mean, getattr(self.layer1, "1").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_16 = torch.add_(out_2, input_11, alpha=1)
  input_17 = torch.threshold_(input_16, 0., 0.)
  input_18 = torch._convolution(input_17, getattr(self.layer2, "0").conv1.weight, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _6 = torch.add_(getattr(self.layer2, "0").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_19 = torch.batch_norm(input_18, getattr(self.layer2, "0").bn1.weight, getattr(self.layer2, "0").bn1.bias, getattr(self.layer2, "0").bn1.running_mean, getattr(self.layer2, "0").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_20 = torch.threshold_(input_19, 0., 0.)
  input_21 = torch._convolution(input_20, getattr(self.layer2, "0").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _7 = torch.add_(getattr(self.layer2, "0").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_3 = torch.batch_norm(input_21, getattr(self.layer2, "0").bn2.weight, getattr(self.layer2, "0").bn2.bias, getattr(self.layer2, "0").bn2.running_mean, getattr(self.layer2, "0").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_22 = torch._convolution(input_17, getattr(getattr(self.layer2, "0").downsample, "0").weight, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
  _8 = torch.add_(getattr(getattr(self.layer2, "0").downsample, "1").num_batches_tracked, CONSTANTS.c0, alpha=1)
  residual_1 = torch.batch_norm(input_22, getattr(getattr(self.layer2, "0").downsample, "1").weight, getattr(getattr(self.layer2, "0").downsample, "1").bias, getattr(getattr(self.layer2, "0").downsample, "1").running_mean, getattr(getattr(self.layer2, "0").downsample, "1").running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_23 = torch.add_(out_3, residual_1, alpha=1)
  input_24 = torch.threshold_(input_23, 0., 0.)
  input_25 = torch._convolution(input_24, getattr(self.layer2, "1").conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _9 = torch.add_(getattr(self.layer2, "1").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_26 = torch.batch_norm(input_25, getattr(self.layer2, "1").bn1.weight, getattr(self.layer2, "1").bn1.bias, getattr(self.layer2, "1").bn1.running_mean, getattr(self.layer2, "1").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_27 = torch.threshold_(input_26, 0., 0.)
  input_28 = torch._convolution(input_27, getattr(self.layer2, "1").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _10 = torch.add_(getattr(self.layer2, "1").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_4 = torch.batch_norm(input_28, getattr(self.layer2, "1").bn2.weight, getattr(self.layer2, "1").bn2.bias, getattr(self.layer2, "1").bn2.running_mean, getattr(self.layer2, "1").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_29 = torch.add_(out_4, input_24, alpha=1)
  input_30 = torch.threshold_(input_29, 0., 0.)
  input_31 = torch._convolution(input_30, getattr(self.layer3, "0").conv1.weight, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _11 = torch.add_(getattr(self.layer3, "0").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_32 = torch.batch_norm(input_31, getattr(self.layer3, "0").bn1.weight, getattr(self.layer3, "0").bn1.bias, getattr(self.layer3, "0").bn1.running_mean, getattr(self.layer3, "0").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_33 = torch.threshold_(input_32, 0., 0.)
  input_34 = torch._convolution(input_33, getattr(self.layer3, "0").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _12 = torch.add_(getattr(self.layer3, "0").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_5 = torch.batch_norm(input_34, getattr(self.layer3, "0").bn2.weight, getattr(self.layer3, "0").bn2.bias, getattr(self.layer3, "0").bn2.running_mean, getattr(self.layer3, "0").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_35 = torch._convolution(input_30, getattr(getattr(self.layer3, "0").downsample, "0").weight, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
  _13 = torch.add_(getattr(getattr(self.layer3, "0").downsample, "1").num_batches_tracked, CONSTANTS.c0, alpha=1)
  residual_2 = torch.batch_norm(input_35, getattr(getattr(self.layer3, "0").downsample, "1").weight, getattr(getattr(self.layer3, "0").downsample, "1").bias, getattr(getattr(self.layer3, "0").downsample, "1").running_mean, getattr(getattr(self.layer3, "0").downsample, "1").running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_36 = torch.add_(out_5, residual_2, alpha=1)
  input_37 = torch.threshold_(input_36, 0., 0.)
  input_38 = torch._convolution(input_37, getattr(self.layer3, "1").conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _14 = torch.add_(getattr(self.layer3, "1").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_39 = torch.batch_norm(input_38, getattr(self.layer3, "1").bn1.weight, getattr(self.layer3, "1").bn1.bias, getattr(self.layer3, "1").bn1.running_mean, getattr(self.layer3, "1").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_40 = torch.threshold_(input_39, 0., 0.)
  input_41 = torch._convolution(input_40, getattr(self.layer3, "1").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _15 = torch.add_(getattr(self.layer3, "1").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_6 = torch.batch_norm(input_41, getattr(self.layer3, "1").bn2.weight, getattr(self.layer3, "1").bn2.bias, getattr(self.layer3, "1").bn2.running_mean, getattr(self.layer3, "1").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_42 = torch.add_(out_6, input_37, alpha=1)
  input_43 = torch.threshold_(input_42, 0., 0.)
  input_44 = torch._convolution(input_43, getattr(self.layer4, "0").conv1.weight, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _16 = torch.add_(getattr(self.layer4, "0").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_45 = torch.batch_norm(input_44, getattr(self.layer4, "0").bn1.weight, getattr(self.layer4, "0").bn1.bias, getattr(self.layer4, "0").bn1.running_mean, getattr(self.layer4, "0").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_46 = torch.threshold_(input_45, 0., 0.)
  input_47 = torch._convolution(input_46, getattr(self.layer4, "0").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _17 = torch.add_(getattr(self.layer4, "0").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out_7 = torch.batch_norm(input_47, getattr(self.layer4, "0").bn2.weight, getattr(self.layer4, "0").bn2.bias, getattr(self.layer4, "0").bn2.running_mean, getattr(self.layer4, "0").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_48 = torch._convolution(input_43, getattr(getattr(self.layer4, "0").downsample, "0").weight, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
  _18 = torch.add_(getattr(getattr(self.layer4, "0").downsample, "1").num_batches_tracked, CONSTANTS.c0, alpha=1)
  residual = torch.batch_norm(input_48, getattr(getattr(self.layer4, "0").downsample, "1").weight, getattr(getattr(self.layer4, "0").downsample, "1").bias, getattr(getattr(self.layer4, "0").downsample, "1").running_mean, getattr(getattr(self.layer4, "0").downsample, "1").running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_49 = torch.add_(out_7, residual, alpha=1)
  input_50 = torch.threshold_(input_49, 0., 0.)
  input_51 = torch._convolution(input_50, getattr(self.layer4, "1").conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _19 = torch.add_(getattr(self.layer4, "1").bn1.num_batches_tracked, CONSTANTS.c0, alpha=1)
  input_52 = torch.batch_norm(input_51, getattr(self.layer4, "1").bn1.weight, getattr(self.layer4, "1").bn1.bias, getattr(self.layer4, "1").bn1.running_mean, getattr(self.layer4, "1").bn1.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_53 = torch.threshold_(input_52, 0., 0.)
  input_54 = torch._convolution(input_53, getattr(self.layer4, "1").conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _20 = torch.add_(getattr(self.layer4, "1").bn2.num_batches_tracked, CONSTANTS.c0, alpha=1)
  out = torch.batch_norm(input_54, getattr(self.layer4, "1").bn2.weight, getattr(self.layer4, "1").bn2.bias, getattr(self.layer4, "1").bn2.running_mean, getattr(self.layer4, "1").bn2.running_var, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input_55 = torch.add_(out, input_50, alpha=1)
  input_56 = torch.threshold_(input_55, 0., 0.)
  x = torch.avg_pool2d(input_56, [7, 7], [1, 1], [0, 0], False, True)
  _21 = ops.prim.NumToTensor(torch.size(x, 0))
  input = torch.view(x, [int(_21), -1])
  _22 = torch.addmm(self.fc.bias, input, torch.t(self.fc.weight), beta=1, alpha=1)
  return _22
